[{"D:\\UMN\\Semester 3\\PTI LAB\\Quiz Week 13\\countdown\\src\\App.js":"1","D:\\UMN\\Semester 3\\PTI LAB\\Quiz Week 13\\countdown\\src\\reportWebVitals.js":"2","D:\\UMN\\Semester 3\\PTI LAB\\Quiz Week 13\\countdown\\src\\index.js":"3"},{"size":4427,"mtime":1606399600435,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"nuietr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\UMN\\Semester 3\\PTI LAB\\Quiz Week 13\\countdown\\src\\App.js",["15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"],"import './App.css';\nimport uparrow from './up.png';\nimport downarrow from './down.png';\nimport clock from './jam.png';\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [time, setTime] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  const [started, setStarted] = useState(false);\n  const [showBoom, setShowBoom] = useState(false);\n  const [paused, setPaused] = useState(false);\n  const { hours, minutes, seconds } = time;\n  let interval;\n  useEffect(() => {\n    if (started) {\n      interval = setInterval(() => {\n        //console.log(\"test\");\n        if (seconds > 0) {\n          setTime({\n            ...time,\n            seconds: seconds - 1,\n          });\n        }\n        if (seconds === 0) {\n          if (minutes === 0) {\n            if (hours === 0) {\n              clearInterval(interval);\n              setStarted(false);\n              setShowBoom(true);\n            } else {\n              setTime({\n                ...time,\n                hours: hours - 1,\n                minutes: 59,\n                seconds: 59,\n              });\n            }\n          } else {\n            setTime({\n              ...time,\n              minutes: minutes - 1,\n              seconds: 59,\n            });\n          }\n        }\n      }, 1000);\n    }\n\n    return () => clearInterval(interval);\n  }, [time, started]);\n\n  const startCountdown = () => {\n    if (hours === 0 && minutes === 0 && seconds === 0) {\n      return;\n    }\n\n    setStarted(true);\n    setPaused(false);\n  };\n\n  const resetCountodown = () => {\n    setStarted(false);\n    setTime({\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n    });\n  };\n\n  const handleChange = (type, waktu) => {\n    setShowBoom(false);\n    if (type === \"increment\" && waktu === \"h\") {\n      if (hours + 1 > 24) {\n        return;\n      }\n      setTime({ ...time, hours: hours + 1 });\n    }\n\n    if (type === \"decrement\" && waktu === \"h\") {\n      if (hours - 1 < 0) {\n        return;\n      }\n      setTime({ ...time, hours: hours - 1 });\n    }\n\n    if (type === \"increment\" && waktu === \"m\") {\n      if (minutes + 1 > 59) {\n        return;\n      }\n      setTime({ ...time, minutes: minutes + 1 });\n    }\n\n    if (type === \"decrement\" && waktu === \"m\") {\n      if (minutes - 1 < 0) {\n        return;\n      }\n      setTime({ ...time, minutes: minutes - 1 });\n    }\n\n    if (type === \"increment\" && waktu === \"s\") {\n      if (seconds + 1 > 59) {\n        return;\n      }\n      setTime({ ...time, seconds: seconds + 1 });\n    }\n\n    if (type === \"decrement\" && waktu === \"s\") {\n      if (seconds - 1 < 0) {\n        return;\n      }\n      setTime({ ...time, seconds: seconds - 1 });\n    }\n  };\n\n  const pauseCountdown = () => {\n    clearInterval(interval);\n    setPaused(true);\n    if (started) {\n      setStarted(false);\n    } else {\n      setStarted(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"Title\">\n          <img src={clock} className=\"jam\"></img>SIMPLE COUNTDOWN<img src={clock} className=\"jam\"></img>\n        </p>\n        <div className=\"boom2\">{showBoom && \"BOOMMM!!!\"}</div>\n        <div className=\"boom\">{started && !showBoom && \"Remaining:\"}</div>\n        <img src={uparrow} className=\"arrow1\" onClick={(e) => handleChange(\"increment\", \"h\")}></img>\n        <div className=\"hour\">\n          {hours}<a style={{ marginRight: '1.8rem' }}></a> : <a style={{ marginLeft: '1rem' }}></a>{minutes} <a style={{ marginLeft: '2rem' }}></a>:<a style={{ marginLeft: '0.7rem' }}></a> {seconds}\n        </div>\n        <img src={downarrow} className=\"arrow6\" onClick={(e) => handleChange(\"decrement\", \"h\")}></img>\n        <img src={uparrow} className=\"arrow2\" onClick={(e) => handleChange(\"increment\", \"m\")}></img>\n        <img src={downarrow} className=\"arrow3\" onClick={(e) => handleChange(\"decrement\", \"m\")}></img>\n        <img src={uparrow} className=\"arrow4\" onClick={(e) => handleChange(\"increment\", \"s\")}></img>\n        <img src={downarrow} className=\"arrow5\" onClick={(e) => handleChange(\"decrement\", \"s\")}></img>\n        <button className=\"startbutton\" onClick={startCountdown}>\n          {paused ? \"RESUME\" : \"START\"}\n        </button>\n        <button className=\"resetbutton\" onClick={resetCountodown}> RESET</button>\n        {started && <button className=\"pausebutton\" onClick={pauseCountdown}> PAUSE</button>}\n      </header>\n    </div>\n  );\n}\n\n\nexport default App;\n","D:\\UMN\\Semester 3\\PTI LAB\\Quiz Week 13\\countdown\\src\\reportWebVitals.js",[],"D:\\UMN\\Semester 3\\PTI LAB\\Quiz Week 13\\countdown\\src\\index.js",[],{"ruleId":"32","severity":1,"message":"33","line":21,"column":18,"nodeType":"34","endLine":51,"endColumn":15},{"ruleId":"35","severity":1,"message":"36","line":134,"column":11,"nodeType":"37","endLine":134,"endColumn":44},{"ruleId":"35","severity":1,"message":"36","line":134,"column":66,"nodeType":"37","endLine":134,"endColumn":99},{"ruleId":"35","severity":1,"message":"36","line":138,"column":9,"nodeType":"37","endLine":138,"endColumn":95},{"ruleId":"38","severity":1,"message":"39","line":140,"column":18,"nodeType":"37","endLine":140,"endColumn":55},{"ruleId":"40","severity":1,"message":"41","line":140,"column":18,"nodeType":"37","endLine":140,"endColumn":55},{"ruleId":"38","severity":1,"message":"39","line":140,"column":62,"nodeType":"37","endLine":140,"endColumn":96},{"ruleId":"40","severity":1,"message":"41","line":140,"column":62,"nodeType":"37","endLine":140,"endColumn":96},{"ruleId":"38","severity":1,"message":"39","line":140,"column":110,"nodeType":"37","endLine":140,"endColumn":144},{"ruleId":"40","severity":1,"message":"41","line":140,"column":110,"nodeType":"37","endLine":140,"endColumn":144},{"ruleId":"38","severity":1,"message":"39","line":140,"column":149,"nodeType":"37","endLine":140,"endColumn":185},{"ruleId":"40","severity":1,"message":"41","line":140,"column":149,"nodeType":"37","endLine":140,"endColumn":185},{"ruleId":"35","severity":1,"message":"36","line":142,"column":9,"nodeType":"37","endLine":142,"endColumn":97},{"ruleId":"35","severity":1,"message":"36","line":143,"column":9,"nodeType":"37","endLine":143,"endColumn":95},{"ruleId":"35","severity":1,"message":"36","line":144,"column":9,"nodeType":"37","endLine":144,"endColumn":97},{"ruleId":"35","severity":1,"message":"36","line":145,"column":9,"nodeType":"37","endLine":145,"endColumn":95},{"ruleId":"35","severity":1,"message":"36","line":146,"column":9,"nodeType":"37","endLine":146,"endColumn":97},"react-hooks/exhaustive-deps","Assignments to the 'interval' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]